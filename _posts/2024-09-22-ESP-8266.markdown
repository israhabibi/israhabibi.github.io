---
layout: post
title:  "ESP8266 Weather Sensor Project"
date:   2024-09-22 15:29:00 +0700
categories: IoT
---
## Overview

This project consists of an ESP8266 microcontroller that reads temperature and humidity data from a DHT22 sensor and sends this data to a Flask web application. The Flask app fetches additional weather data from the OpenWeather API and stores all the data in a PostgreSQL database. The application is managed using Supervisor for easy process control.

## ESP8266 Code

### Code

```c++
#include <ESP8266WiFi.h>
#include <DHT.h>

// DHT Sensor setup
#define DHTPIN D1  // Pin connected to the DHT22 sensor
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// WiFi credentials
const char* ssid = "";
const char* password = "";

// Server settings
const char* server = "gcp.local"; // Server where the API or script to insert data into PostgreSQL is hosted
const int port = 5001;  // Default HTTP port
String url = "/insert_data";  // Endpoint to handle insertion logic

void setup() {
  Serial.begin(115200);
  delay(10);
  dht.begin();

  // Connect to WiFi
  Serial.println();
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("WiFi connected");
}

void loop() {
  // Read temperature and humidity values
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Check if any readings failed
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Prepare the data in URL encoded format
  String data = "temperature=" + String(temperature) + "&humidity=" + String(humidity);

  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected.");
    return; // Exit if not connected
  }

  WiFiClient client;

  // Attempt to connect to the server
  if (client.connect(server, port)) {
    Serial.println("Connected to server. Sending data...");
    Serial.println("Data to be sent: " + data);

    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: " + String(server));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Connection: close");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.print(data);

    // Wait for the server's response
    int max_retry = 5;
    bool headersEnded = false;

    while (client.connected() && max_retry > 0) {
      String line = client.readStringUntil('\n');
      if (line == "\r") {
        headersEnded = true; // End of headers
        break;
      }
      max_retry--;
      delay(500);
    }

    // If headers have ended, read the response body
    if (headersEnded) {
      String responseBody = client.readString(); // Read the remaining response (body)
      Serial.println("Response: " + responseBody); // Print the response body
    } else {
      Serial.println("Failed to receive response in time.");
    }
  } else {
    Serial.println("Failed to connect to server. Please check server status.");
  }

  // Wait before sending the next data
  delay(60000);  // 60 seconds delay between measurements
}
```

###Library Used
ESP8266WiFi.h: For managing WiFi connections.
DHT.h: For interacting with the DHT22 sensor.

###Functionality
Connects to the specified WiFi network.
Reads temperature and humidity data from the DHT22 sensor.
Sends data to the Flask web application via HTTP POST requests.
Receives and logs the server's response.

## Flask Application

### Code

```python
import requests
import psycopg2
from flask import Flask, request, jsonify
from datetime import datetime
import signal
import sys

app = Flask(__name__)

# OpenWeather API details
api_key = 'YOUR_API_KEY'  # Replace with your API key
city = 'Jakarta'
weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"

# PostgreSQL database connection details
db_host = "" 
db_port = ""
db_name = ""
db_user = ""
db_password = ""

# Fetch data from OpenWeather API
def fetch_weather_data():
    response = requests.get(weather_url)
    if response.status_code == 200:
        data = response.json()
        weather = {
            'city': data['name'],
            'temperature': data['main']['temp'],
            'humidity': data['main']['humidity'],
            'weather_description': data['weather'][0]['description'],
            'timestamp': datetime.now()
        }
        return weather
    else:
        print(f"Error fetching data: {response.status_code}")
        return None

# Insert data into PostgreSQL
def insert_data_to_postgres(sensor_temperature, sensor_humidity, weather):
    try:
        # Connect to PostgreSQL
        connection = psycopg2.connect(
            host=db_host,
            port=db_port,
            dbname=db_name,
            user=db_user,
            password=db_password
        )
        cursor = connection.cursor()

        # Insert query
        insert_query = """
        INSERT INTO sensor_weather_data 
        (sensor_temperature, sensor_humidity, city, api_temperature, api_humidity, weather_description, timestamp)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """
        cursor.execute(insert_query, (
            sensor_temperature,
            sensor_humidity,
            weather['city'],
            weather['temperature'],
            weather['humidity'],
            weather['weather_description'],
            datetime.now()  # timestamp in Asia/Jakarta
        ))

        # Commit the transaction
        connection.commit()

        print("Data inserted successfully")

    except (Exception, psycopg2.DatabaseError) as error:
        print(f"Error inserting data: {error}")
    finally:
        if connection:
            cursor.close()
            connection.close()

# Route for inserting data
@app.route('/insert_data', methods=['POST'])
def insert_data():
    if request.method == 'POST':
        # Fetch sensor data from ESP8266
        sensor_temperature = request.form.get('temperature')
        sensor_humidity = request.form.get('humidity')

        if sensor_temperature is None or sensor_humidity is None:
            return jsonify({"error": "Missing temperature or humidity from sensor"}), 400

        # Fetch weather data from OpenWeather API
        weather_data = fetch_weather_data()
        if weather_data is None:
            return jsonify({"error": "Failed to fetch weather data"}), 500

        # Insert both sensor data and weather data into PostgreSQL
        insert_data_to_postgres(sensor_temperature, sensor_humidity, weather_data)

        return jsonify({"message": "Data inserted successfully"}), 201

    return jsonify({"message": "Invalid request method"}), 405

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)
```

### Libraries Used
Flask: Web framework for building the API.
requests: To make HTTP requests to the OpenWeather API.
psycopg2: PostgreSQL database adapter.

### Functionality
Receives temperature and humidity data from the ESP8266 via HTTP POST requests.
Fetches additional weather data from the OpenWeather API.
Inserts both sensor and weather data into the PostgreSQL database.
Handles graceful shutdown on receiving termination signals.

## Shell Script
### Code Explanation
```bash
#!/bin/bash
# Activate the virtual environment
source /home/isra/loc_env/bin/activate

# Run the Python script
python /home/isra/OpenWeather/app.py
```

### Functionality
Activates the Python virtual environment.
Executes the Flask application.

## Supervisor Configuration
### Configuration File
```ini

[program:flask_app]
command=/home/isra/OpenWeather/run_weather_sensor.sh
directory=/home/isra/OpenWeather
autostart=true
autorestart=true
stderr_logfile=/home/isra/OpenWeather/log/weather_sensor.err.log
stdout_logfile=/home/isra/OpenWeather/log/weather_sensor.out.log
stopasgroup=true
killasgroup=true
```

### Configuration Options
command: The command to run the Flask application using the shell script.
directory: The working directory for the application.
autostart: Automatically start the application when Supervisor starts.
autorestart: Restart the application if it crashes.
stderr_logfile: Log file for standard error output.
stdout_logfile: Log file for standard output.
stopasgroup: Stops all processes in the group when stopping.
killasgroup: Kills the entire group of processes when stopping.

## Setup Instructions
* Install Required Libraries:

Ensure you have the required Python libraries installed:
```bash
pip install Flask requests psycopg2
```

* Database Setup:

Create a PostgreSQL database and the necessary table to store weather data.

* Configure Supervisor:

Place the Supervisor configuration file in the appropriate directory (`nano /etc/supervisor/conf.d/flask_app.conf`).

`chmod +x /home/isra/Project/weather-sensor-local/run_weather_sensor.sh`

* Reload Supervisor to apply the configuration:
```bash
sudo supervisorctl reread
sudo supervisorctl update
```

* Run the ESP8266 Code:
Upload the ESP8266 code to the microcontroller using the Arduino IDE

## Conclusion
This documentation provides a comprehensive overview of the ESP8266 weather sensor project, covering the code for both the microcontroller and the server, as well as the necessary setup instructions. By following this guide, users can successfully deploy a system to collect and store weather data.

